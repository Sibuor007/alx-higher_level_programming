Usage of 0-add_integer.py
===========================

defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 7)
    12

::

    >>> add_integer(-10, 3)
    -7

The function works with floating-point values.

::

    >>> add_integer(3.5, 2.5)
    6

Note that floats are casted to ints before addition.

::

    >>> add_integer(2.2, 1.8)
    3

::

    >>> add_integer(-4.5, -1.5)
    -6

Floating and non-floating point values can be combined.

::

    >>> add_integer(6.7, -3)
    3

The second argument is optional, it is 98.

::

    >>> add_integer(10)
    108

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("world", 4)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(7, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(3.2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("world", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail with infinity

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(5, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

also again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(3, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
