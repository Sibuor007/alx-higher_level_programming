How to Utilize 4-print_square.py
=================================

This module introduces a function called ``print_square(size)`` for printing squares.

Usage
=====

Squares are displayed using the character ``#``, and the parameter ``size`` denotes both the height and width of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(2)
    ##
    ##

::

    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####

::

    >>> print_square(8)
    ########
    ########
    ########
    ########
    ########
    ########
    ########
    ########

If the ``size`` is zero, the function will not print anything.

::

    >>> print_square(0)

Invalid Sizes
=============

The ``size`` parameter must be an integer; otherwise, a TypeError is triggered.

::

    >>> print_square("invalid size")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(3.3)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

A ValueError is raised if ``size`` is less than zero.

::

    >>> print_square(-6)
    Traceback (most recent call last):
    ValueError: size must be >= 0

It's important to note that type-checking is performed before value-checking.

::

    >>> print_square(-6.6)
    Traceback (most recent call last):
    TypeError: size must be an integer

At least one argument must be provided.

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

